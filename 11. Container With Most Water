/*
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai).
n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container,
such that the container contains the most water.
Notice that you may not slant the container.

Example:

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
*/

class Solution {
    public int maxArea(int[] height) {
        int maxarea=0, left=0, right=height.length-1;
        
        // Continue until left marker hits the right marker
        while(left<right){
            // Calculate the current area by distance between markers times the height of smaller marker
            // Pick the largest area between previous and current calculation
            maxarea = Math.max(maxarea, Math.min(height[left], height[right]) * (right-left));
            // If left marker is small, increment it else decrement the right marker
            if(height[left]<height[right])
                left++;
            else right--;
        }
        return maxarea;
    }
}