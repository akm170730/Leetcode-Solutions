/*
Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree,
and every node has no left child and only one right child.

Example 1:

Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
*/

class Solution {
    
    public TreeNode increasingBST(TreeNode root) {
        List<Integer> values = new ArrayList<>();
        inorder(root, values);
        TreeNode result = new TreeNode(0), curr = result;
        
        for(int value: values){
            curr.right = new TreeNode(value);
            curr = curr.right;
        }
        
        return result.right;
    }
    
    public void inorder(TreeNode root, List<Integer> values){
        if(root != null){
            if(root.left != null) inorder(root.left, values);
            values.add(root.val);
            if(root.right != null) inorder(root.right, values);
        }
    }
}