/*
You are given a list of songs where the ith song has a duration of time[i] seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by 60.
Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.

Example 1:

Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60
*/

class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        
        // To keep a count of frequency of remainders
        int[] remainders = new int[60];
        int result=0;
        
        for(int t: time){
            // Check if current element mod 60 == 0 then add in result
            if(t%60==0) result += remainders[0];
            else{
                // Else find the frequency of COMPLEMENT of 60 for current element
                result += remainders[60-t%60];
            }
            // Increment the frequency of remainder for current element
            remainders[t%60]++;
        }
        return result;
    }
}