/*
You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and 
equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.
We repeatedly make k duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
*/

class Solution {
    public String removeDuplicates(String s, int k) {
        StringBuilder sb = new StringBuilder(s);
        Stack<Integer> st = new Stack<>();
        
        for(int i=0; i<sb.length(); ++i){
            if(i==0 || sb.charAt(i)!=sb.charAt(i-1))
                st.push(1);
            else{
                int increment = st.pop() + 1;
                if(increment==k){
                    sb.delete(i-k+1, i+1);
                    i = i-k;
                }
                else
                    st.push(increment);
            }
        }
        return sb.toString();
    }
}