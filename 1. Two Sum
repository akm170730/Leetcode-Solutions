/*
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].
*/

class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        // To store the elements with their index
        HashMap<Integer, Integer> rec = new HashMap<>();

        for(int i=0; i<nums.length; i++){
            // If the map contains complement for the current element, compare its index with current index
            if(rec.containsKey(target-nums[i])){
                // If the index does not match, then add this pair to result array and return it
                if(i != rec.get(target-nums[i]))
                    return new int[]{i,rec.get(target-nums[i])};
            }
            // Else store the current element in map
            rec.put(nums[i], i);
        }
        
        // If no sollution exists, return exception
        throw new IllegalArgumentException("No solution exists");
    }
}