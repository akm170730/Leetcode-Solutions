/*
A string s of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:

Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.
*/

class Solution {
    public List<Integer> partitionLabels(String s) {
        
        // To store the last occurence of every character
        int[] lastPos = new int[26];
        for(int i=0; i<s.length(); ++i){
            lastPos[s.charAt(i) - 'a'] = i;
        }
        
        // To compare the last position with current and anchor variable to calculate the distance
        int j=0, anchor=0;
        // To return the result
        List<Integer> ans = new ArrayList<>();
        for(int i=0; i<s.length(); ++i){
            // Select the last position of current character if it exists in lastPos array
            j = Math.max(j, lastPos[s.charAt(i)- 'a']);
            
            // If the current and last position is same
            if(i==j){
                // Then calculate the distance and store in result list
                ans.add(i-anchor+1);
                // Reset the distance to next character in input string
                anchor = i+1;
                
            }
        }
        return ans;
    }
}